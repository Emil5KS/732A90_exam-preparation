# Define the function of the inverse cdf
inverse_cdf <- function(x) {
return(x^(2/3))
}
# Generate 10000 random values uniform(0, 1) and
# sample from the inverse cdf
u <- runif(10000)
res_11 <- inverse_cdf(u)
# Generate the values of the real distribution
x <- seq(0.001, 0.999, 0.001)
y <- 1.5 * sqrt(x)
# Plot the distributions in a histogram
hist(res_11, freq = FALSE,
breaks = 30,
xlab = "x", ylab = "Density",
main = "Distribution of f(x)",
col = "grey")
# Plot the density estimate of the sample (blue) and the true values
# of the function (red)
lines(density(res_11), col = "blue", lwd = 2)
lines(x, y, col = "red", lwd = 2)
# Add a legend
legend(x = 0, y = 1.5,
legend = c("sample", "sample density", "true density"),
col = c("grey", "blue", "red"),
pch = c(16, 16, 16),
cex = 0.8)
# Template for metropolis hastings algorithm:
dt <- function(x) {
if (x <= 0 || x >= 1) {
stop("x has to be greater than 0 and smaller than 1.")
}
return(sqrt(x) / (x+0.1))
}
dp <- function(x, xt) {
dbeta(x, xt, 0.5)
}
rp <- function(x) {
rbeta(1, x, 0.5)
}
metropolis_hastings <- function(x_0, t_max, dt, dp, rp) {
# Perform Metropolis-Hastings sampling of the specified density.
#
# Args:
#   x_0   starting value.
#   t_max maximum numer of iterations.
#   dt    density function from which we want to sample.
#   dp    proposal density function, should accept 2 arguments:
#           x:  value at which to compute density.
#           x_t: value on which the rq is conditioned.
#   rp    proposal random number generator, should accept 1 argument:
#           x_t: value on which the rq is conditioned.
#
# Returns:
#   Vector of sampled points of length t_max.
x_t <- x_0
x <- vector("numeric", t_max) # pre-allocate
# Metropolis-Hastings
for (t in 1:t_max) {
# Generate a candidate
y <- rp(x_t)
# Generate U
u <- runif(1, 0, 1)
# Compute alpha
alpha <- min(1, (dt(y) * dp(x_t, y)) / (dt(x_t) * dp(y, x_t)))
# Accept the jump or stay in x_t
if (u < alpha) {
x_t <- y
}
# Sace x_t in vector
x[t] <- x_t
}
return(x)
}
set.seed(12345)
res_12 <- metropolis_hastings(0.1, 100000, dt, dp, rp)
res_12 <- metropolis_hastings(0.1, 100000, dt, dp, rp)
plot(res_12, type = 'l',
main = "Traceplot",
xlab = "Index", ylab = "x")
sample2_integral_value <- round(mean(res_12), 2)
# Template for metropolis hastings algorithm:
dt <- function(x) {
if (x <= 0 || x >= 1) {
stop("x has to be greater than 0 and smaller than 1.")
}
return(sqrt(x) / (x+0.1))
}
dp <- function(x, xt) {
dbeta(x, xt, 0.5)
}
rp <- function(x) {
rbeta(1, x, 0.5)
}
metropolis_hastings <- function(x_0, t_max, dt, dp, rp) {
# Perform Metropolis-Hastings sampling of the specified density.
#
# Args:
#   x_0   starting value.
#   t_max maximum numer of iterations.
#   dt    density function from which we want to sample.
#   dp    proposal density function, should accept 2 arguments:
#           x:  value at which to compute density.
#           x_t: value on which the rq is conditioned.
#   rp    proposal random number generator, should accept 1 argument:
#           x_t: value on which the rq is conditioned.
#
# Returns:
#   Vector of sampled points of length t_max.
x_t <- x_0
x <- vector("numeric", t_max) # pre-allocate
# Metropolis-Hastings
for (t in 1:t_max) {
# Generate a candidate
y <- rp(x_t)
# Generate U
u <- runif(1, 0, 1)
# Compute alpha
alpha <- min(1, (dt(y) * dp(x_t, y)) / (dt(x_t) * dp(y, x_t)))
# Accept the jump or stay in x_t
if (u < alpha) {
x_t <- y
}
# Sace x_t in vector
x[t] <- x_t
}
return(x)
}
set.seed(12345)
res_12 <- metropolis_hastings(0.1, 1000, dt, dp, rp)
plot(res_12, type = 'l',
main = "Traceplot",
xlab = "Index", ylab = "x")
# Optional code for plotting the histogram
# hist(res_12, breaks = 28, freq = FALSE,
#      col = "grey",
#      xlim = c(0, 1), ylim = c(0, 2),
#      xlab = "x", ylab = "Density",
#      main = "Metropolis hastings sample")
# x <- seq(0.01, 0.99, 0.01)
# y <- sapply(x, dt)
# lines(x, y, col = "red", lwd = 2)
# lines(density(res_12), col = "blue", lwd = 2)
# legend("topright",
#        legend = c("Sampled", "Sampled density", "True density"),
#        col = c("grey", "blue", "red"),
#        pch = c(16, 16, 16),
#        cex = 0.8)
f <- function(x) {
(x*sqrt(x)) / (x+0.1)
}
true_integral_value <- integrate(f, 0, 1)$value
sample2_integral_value <- round(mean(res_12), 2)
sample2_integral_value
1/log(0.1) * 0.1 - 1/log(0.1)
knitr::opts_chunk$set(echo = TRUE)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(10000)
y <- sapply(u, inverse_cdf, a = 0.1)
plot(u, y)
x <- seq(0.01, 0.99, 0.01)
y <- a^x
plot(x, y)
x <- seq(0.01, 0.99, 0.01)
y <- a^x
y <- 0.1^x
plot(x, y)
y <- sapply(u, inverse_cdf, a = 0.1)
plot(u, y)
hist(y)
hist(y, freq = FALSE, break = 30)
hist(y, freq = FALSE, breaks = 30)
hist(y, freq = FALSE, breaks = 30,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x * c
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(10000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x * c
hist(res_11, freq = FALSE, breaks = 30,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
lines(density(y), col = "red", lwd = 2)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(10000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x
hist(res_11, freq = FALSE, breaks = 30,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
lines(density(y), col = "red", lwd = 2)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(100000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x
hist(res_11, freq = FALSE, breaks = 30,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
lines(density(y), col = "red", lwd = 2)
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(100000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
lines(density(y), col = "red", lwd = 2)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(10000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
lines(density(y), col = "red", lwd = 2)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(1000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
lines(density(y), col = "red", lwd = 2)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(1000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
lines(density(res_11), col = "blue", lwd = 2)
lines(density(y), col = "red", lwd = 2)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(10000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
lines(density(res_11), col = "blue", lwd = 2)
lines(density(y), col = "red", lwd = 2)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(100000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
lines(density(res_11), col = "blue", lwd = 2)
lines(density(y), col = "red", lwd = 2)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(100000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x * c
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
lines(density(res_11), col = "blue", lwd = 2)
lines(density(y), col = "red", lwd = 2)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(100000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x * c
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
lines(density(res_11), col = "blue", lwd = 2)
lines(x, y)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(100000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x * c
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
col = "grey")
lines(density(res_11), col = "blue", lwd = 2)
lines(x, y, col = "red", lwd = 2)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(100000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x * c
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 2.5),
xlab = "x", ylab = "Density",
main = "Histrogram inverse CDF sampling",
col = "grey")
lines(density(res_11), col = "blue", lwd = 2)
lines(x, y, col = "red", lwd = 2)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(100000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x * c
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 3),
xlab = "x", ylab = "Density",
main = "Histrogram inverse CDF sampling",
col = "grey")
lines(density(res_11), col = "blue", lwd = 2)
lines(x, y, col = "red", lwd = 2)
legend("")
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(100000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x * c
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 3),
xlab = "x", ylab = "Density",
main = "Histrogram inverse CDF sampling",
col = "grey")
lines(density(res_11), col = "blue", lwd = 2)
lines(x, y, col = "red", lwd = 2)
legend(x = 0.8, y = 3,
legend = c("Sampled values", "Sample Density", "Real Values"),
col = c("grey", "blue", "red"),
pch = c(16, 16, 16))
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(100000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x * c
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 3),
xlab = "x", ylab = "Density",
main = "Histrogram inverse CDF sampling",
col = "grey")
lines(density(res_11), col = "blue", lwd = 2)
lines(x, y, col = "red", lwd = 2)
legend(x = 0.6, y = 3,
legend = c("Sampled values", "Sample Density", "Real Values"),
col = c("grey", "blue", "red"),
pch = c(16, 16, 16),
cex = 0.8)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(100000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x * c
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 3),
xlab = "x", ylab = "Density",
main = "Histrogram inverse CDF sampling",
col = "grey")
lines(density(res_11), col = "blue", lwd = 2)
lines(x, y, col = "red", lwd = 2)
legend(x = 0.75, y = 3,
legend = c("Sampled values", "Sample Density", "Real Values"),
col = c("grey", "blue", "red"),
pch = c(16, 16, 16),
cex = 0.8)
inverse_cdf <- function(x, a) {
log(x * (a - 1) + 1) / log(a)
}
u <- runif(1000)
res_11 <- sapply(u, inverse_cdf, a = 0.1)
a <- 0.1
c <- log(a) / (a-1)
x <- seq(0.01, 0.99, 0.01)
y <- a^x * c
hist(res_11, freq = FALSE, breaks = 40,
xlim = c(0,1 ), ylim = c(0, 3),
xlab = "x", ylab = "Density",
main = "Histrogram inverse CDF sampling",
col = "grey")
lines(density(res_11), col = "blue", lwd = 2)
lines(x, y, col = "red", lwd = 2)
legend(x = 0.75, y = 3,
legend = c("Sampled values", "Sample Density", "Real Values"),
col = c("grey", "blue", "red"),
pch = c(16, 16, 16),
cex = 0.8)
knitr::opts_chunk$set(echo = TRUE)
crossover <- function(X, Y) {
return(structure(list(
V1 = floor((2*X + Y) / 3),
V2 = floor((X + 2*Y) / 3)
)))
}
crossover(1, 2)
X <- c(1, 2, 3)
Y <- c(1, 1, 1)
sapply(X, dchisq, df = Y)
dchisq(1, 1)
dchisq(1, 3)
crossover <- function(X, Y) {
return(structure(list(
V1 = floor((2*X + Y) / 3),
V2 = floor((X + 2*Y) / 3)
)))
}
mutation <- function(X) {
return((X*2559 + 107) %% 311)
}
fitness <- function(X, Y) {
n <- length(X)
probabilities <- vector("numeric", length = n)
for (i in 1:n) {
probabilities[i] <- dchisq(X[i], df = Y[i])
}
minus_ll <- sum(log(probabilities))
return(-1/minus_ll)
}
Y <- seq(1, 50, 1)
Y
?sample
X <- read.csv2("../data/X.csv")
View(X)
